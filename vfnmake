#!/usr/bin/env perl

use strict;
use File::Find;
use FindBin;
use File::Copy;
use Getopt::Long;
Getopt::Long::Configure("posix_default",
                        "gnu_compat",
                        "bundling",
                        "no_ignore_case",
                        "no_auto_abbrev");

# variables
my $src;
my $binDir;
my $objsDir;
my @cc;
my @cxx;
my $dcc;
my @cflags;
my @cxxflags;
my @libs;
my @pkgs;
my $name;
my $O;
my $echo;
my $quiet;
my $stdout;
my $ignore;
my $asm;
my $configName = "vfnmake.conf";

my $file;


while ($ARGV[0] eq '-f' || $ARGV[0] eq '--file' || $ARGV[0] eq '-d' || $ARGV[0] eq '--chdir') {
    if ($ARGV[0] eq '-f' || $ARGV[0] eq '--file') {
        shift;
        $configName = $ARGV[0];
        shift;
    } elsif ($ARGV[0] eq '-d' || $ARGV[0] eq '--chdir') {
        shift;
        chdir $ARGV[0];
        shift;
    }
}

# config load
if ( -f $configName ) {
    open($file, '<', $configName);
    while (my $line = <$file>) {
        my $line2   = <$file>;
        $line2      =~ s/^\s*//;
        if ($line eq "libs:\n") {
            @libs = split /\s+/, $line2;
        } elsif ($line eq "pkgs:\n") {
            @pkgs = split /\s+/, $line2;
        } elsif ($line eq "cflags:\n") {
            @cflags   = split /\s+/, $line2;
        } elsif ($line eq "cxxflags:\n") {
            @cxxflags = split /\s+/, $line2;
        } elsif ($line eq "O:\n") {
            chomp ($O = $line2);
        } elsif ($line eq "src_directory:\n") {
            chomp ($src = $line2);
        } elsif ($line eq "bin_directory:\n") {
            chomp ($binDir = $line2);
        } elsif ($line eq "objs_directory:\n") {
            chomp ($objsDir = $line2);
        } elsif ($line eq "cc:\n") {
            @cc  = split /\s+/, $line2;
        } elsif ($line eq "cxx:\n") {
            @cxx = split /\s+/, $line2;
        } elsif ($line eq "debug_cc:\n") {
            chomp ($dcc = $line2);
        } elsif ($line eq "echo:\n") {
            chomp ($echo = $line2);
        } elsif ($line eq "name:\n") {
            chomp ($name = $line2);
        } elsif ($line eq "asm:\n") {
            chomp ($asm = $line2);
        }
    }
    close($file);
}

# argument parsing
GetOptions(
           'cc=s'          => sub { @cc  = split /\s*,\s*/, $_[1] },
           'cxx=s'         => sub { @cxx = split /\s*,\s*/, $_[1] },
           'dcc=s'         => \$dcc,

           'src=s'         => \$src,
           'bin=s'         => \$binDir,
           'objs=s'        => \$objsDir,
           'name=s'        => \$name,

           'cflags=s'      => sub { @cflags   = split /\s*,\s*/, $_[1]  },
           'cflag|c=s'     => sub {      addToArray($_[1], \@cflags)    },
           'Cflag|C=s'     => sub { removeFromArray($_[1], \@cflags)    },

           'cxxflags=s'    => sub { @cxxflags = split /\s*,\s*/, $_[1]  },
           'cxxflag|x=s'   => sub {      addToArray($_[1], \@cxxflags)  },
           'Cxxflag|X=s'   => sub { removeFromArray($_[1], \@cxxflags)  },

           'pkgs=s'        => sub { @pkgs     = split /\s*,\s*/, $_[1]  },
           'pkg|p=s'       => sub {      addToArray($_[1], \@pkgs)      },
           'Pkg|P=s'       => sub { removeFromArray($_[1], \@pkgs)      },

           'libs=s'        => sub { @libs     = split /\s*,\s*/, $_[1]  },
           'lib|l=s'       => sub {      addToArray($_[1], \@libs)      },
           'Lib|L=s'       => sub { removeFromArray($_[1], \@libs)      },

           'O=s'           => \$O,
           'echo|e!'       => \$echo,
           'quiet|q'       => \$quiet,
           'stdout'        => \$stdout,
           'cpp0x'         => sub { addToArray("-std=c++0x", \@cxxflags);
                                    @cc    = ("gcc");
                                    @cxx   = ("g++");
                                    $dcc   =  "g++"},
           'gcc'           => sub { @cc    = ("gcc");
                                    @cxx   = ("g++");
                                    $dcc   =  "g++"},
           'reset'         => sub { @cc    = ("clang"  , "gcc");
                                    @cxx   = ("clang++", "g++");
                                    $dcc   =  "g++";
                                    if ( -d "src" ) {
                                        $src = "src";
                                    } else {
                                        $src = ".";
                                    }
                                    $binDir  = ".";
                                    $objsDir = "objs";
                                    $asm     = 0; },
           'ignore|i'      => \$ignore,
           'asm!'          => \$asm,
           'configure'     => sub { copy($FindBin::RealBin . '/' . $FindBin::RealScript, "./configure.pl") or die "Copy failed\n";
                                    chmod(0755, "./configure.pl") or "Chmod failed\n"; },
          ) or die "\n";


# default values
unless (defined($src)) {
    if ( -d "src" ) {
        $src = "src";
    } else {
        $src = ".";
    }
}
$binDir  ||= ".";
$objsDir ||= "objs";
@cc        = ("clang",   "gcc") unless @cc;
@cxx       = ("clang++", "g++") unless @cxx;
$dcc     ||= "g++";
$name    ||= "a.out";
$O       ||= "-O2";
$echo    //= 0;
$quiet   //= 0;
$stdout  //= 0;
$ignore  //= 0;
$asm     //= 0;



my @CFiles;
find( sub { push @CFiles  , "$File::Find::name" if /\.c$/           and !/^\.?#/ }, $src);
my @CPPFiles;
find( sub { push @CPPFiles, "$File::Find::name" if /\.cpp$/         and !/^\.?#/ }, $src);
my @ASMFiles;
find( sub { push @ASMFiles, "$File::Find::name" if /\.(:?asm|s|S)$/ and !/^\.?#/ }, $src) if $asm;

die "No supported files detected\n" if !$ignore and !@CFiles and !@CPPFiles and !($asm and @ASMFiles);

my @objs =  (@CFiles, @CPPFiles, @ASMFiles);
s#^.*/(.*)\.[^\.]*$#$objsDir/$1.o# foreach @objs;
my $objs =  join(' ', @objs);

my $cflags   = join(' ', @cflags);
my $cxxflags = join(' ', @cxxflags);
my $lflags   = "";
foreach my $lib (@libs) {
    $lflags .= "-l $lib ";
}
my $pkgs;
if (@pkgs) {
    $pkgs    = join(' ', @pkgs);
    $lflags .= "`pkg-config $pkgs --libs` ";
    $cflags  = "$cflags `pkg-config $pkgs --cflags`";
}
chop $lflags;

$src      =~ s|/$||;
$binDir   =~ s|/$||;
$objsDir  =~ s|/$||;



# choose the first existing compiler from the list
my $cc;
my $cxx;
my $linker;

{
    $cc = selectCompiler(\@cc);
    if (@CFiles) {
        die "There are no valid C compilers in the list\n"   unless cmdExist($cc);
    }

    $cxx = selectCompiler(\@cxx);
    if (@CPPFiles) {
        die "There are no valid C++ compilers in the list\n" unless cmdExist($cxx);
        $linker = "\$(CXX)";
    } else {
        $linker = "\$(CC)";
    }
}


# write the macros
my $make = "CC=$cc
CXX=$cxx
CFLAGS=\$(O) $cflags
CXXFLAGS=\$(CFLAGS) $cxxflags
O=$O
LFLAGS=$lflags
OBJS=$objs\n";

$make .= "ASM=nasm -f elf\n" if $asm;

if ( -f "vfnmake.begin" ) {
    open($file, '<', "vfnmake.begin");
    my $sep = $/;
    undef $/;
    $make .= "\n" . <$file>;
    $/ = $sep;
    close($file);
}

$make .= "
.PHONY: all
all: objs $name";

if ($echo) {
    $make .= "\n
$binDir/$name: \$(OBJS)
	$linker \$(LFLAGS) \$(OBJS) -o \"$binDir/$name\"\n";
} else {
    $make .= "\n
$binDir/$name: \$(OBJS)
	@ echo \"    LINK $binDir/$name\"
	@ $linker \$(LFLAGS) \$(OBJS) -o \"$binDir/$name\"\n";
}


# detecting the dependencies
foreach my $CFile (@CFiles) {
    my $deps = `gcc -MM "$CFile"`;    # some compilers have problems sometimes, so I've hardcoded gcc here
    chomp $deps;
    if ($echo) {
        $make .= "
$objsDir/$deps
	\$(CC) \$(CFLAGS) -c \"$CFile\" -o \$@";
    } else {
        $make .= "
$objsDir/$deps
	@ echo \"    CC   $CFile\"
	@ \$(CC) \$(CFLAGS) -c \"$CFile\" -o \$@";
    }
}
foreach my $CPPFile (@CPPFiles) {
    my $deps = `g++ -MM "$CPPFile"`;
    chomp $deps;
    if ($echo) {
        $make .= "
$objsDir/$deps
	\$(CXX) \$(CXXFLAGS) -c \"$CPPFile\" -o \$@";
    } else {
        $make .= "
$objsDir/$deps
	@ echo \"    CXX  $CPPFile\"
	@ \$(CXX) \$(CXXFLAGS) -c \"$CPPFile\" -o \$@";
    }
}
if ($asm) {
    foreach my $ASMFile (@ASMFiles) {
        my $ofile = $ASMFile;
        $ofile =~ s#^.*/(.*)\.[^\.]*$#$objsDir/$1.o#;
        if ($echo) {
            $make .= "
$ofile: $ASMFile
	\$(ASM) \"$ASMFile\" -o \$@";
        } else {
            $make .= "
$ofile: $ASMFile
	@ echo \"    ASM  $ASMFile\"
	@ \$(ASM) \"$ASMFile\" -o \$@";
        }
    }
}


$make .= "\n
objs:
	@ mkdir \"$objsDir\"
.PHONY: c clean
c: clean
clean:
	@ if [ -d \"$objsDir\" ]; then rm -r \"$objsDir\"; fi
	@ rm -f \"$binDir/$name\"
	@ echo \"    CLEAN\"
.PHONY: f fresh
f: fresh
fresh: clean
	@ make all --no-print-directory
.PHONY: r run
r: run
run: all
	@ ./$binDir/$name

.PHONY: d debug
d: debug
debug: CFLAGS += -DDEBUG -g
debug: O=-O0
debug: CC=$dcc
debug: CXX=$dcc\n";

$make .= "debug: ASM += -g\n" if $asm;

$make .= "debug: all

# Emacs flymake-mode
.PHONY: check-syntax
check-syntax:
	g++ \$(CXXFLAGS) -fsyntax-only -Wall -o /dev/null -S \$(CHK_SOURCES)\n";

if ( -f "vfnmake.end" ) {
    open($file, '<', "vfnmake.end");
    my $sep = $/;
    undef $/;
    $make .= "\n" . <$file>;
    $/ = $sep;
    close($file);
}

if ($stdout) {
    print "$make";
} else {
    open($file, '>', "Makefile") or die;
    print $file "$make";
    close($file);
}


# config save
my $config;
my @config = (
              [ cc              => \@cc       ],
              [ cxx             => \@cxx      ],
              [ debug_cc        => $dcc       ],
              [ libs            => \@libs     ],
              [ pkgs            => \@pkgs     ],
              [ O               => $O         ],
              [ cflags          => \@cflags   ],
              [ cxxflags        => \@cxxflags ],
              [ name            => $name      ],
              [ src_directory   => $src       ],
              [ bin_directory   => $binDir    ],
              [ objs_directory  => $objsDir   ],
              [ echo            => $echo      ],
              [ asm             => $asm       ],
             );

for my $p (@config) {
    my $str;
    if (ref $p->[1] eq 'ARRAY') {
        $str = join(' ', @{$p->[1]});
    } else {
        $str = $p->[1];
    }
    $config .= "$p->[0]:\n\t$str\n";
}

open($file, '>', $configName) or die;
print $file "$config";
close($file);
print "$config" unless $quiet or $stdout;


sub addToArray {
    my ($value, $array) = @_;
    push @$array, $value unless grep {$_ eq $value} @$array;
}
sub removeFromArray {
    my ($value, $array) = @_;
    @$array = grep {$_ ne $value} @$array;
}
sub cmdExist {
    return !system("command -v \"$_[0]\" > /dev/null 2> /dev/null");
}
sub selectCompiler {
    my @list = @{$_[0]};
    my $compiler = "";
    do {
        $compiler = shift @list;
    } while (@list != 0 &&
             !cmdExist($compiler));
    $compiler = "" unless cmdExist($compiler);
    return $compiler;
}
