=encoding utf-8

=head1 NAME

vfnmake - a relatively simple Makefile generator

=head1 SYNOPSIS

B<vfnmake> [ B<-f> I<file> ] [ B<-d> I<dir> ] [ B<--convert> ] [ options ]

B<vfnmake> B<--version>

=head1 DESCRIPTION

vfnmake works on fire-and-forget basis with as few configuration as possible. It does not try to compete with CMake or Autotools (yet ;) ). I wrote it because writting Makefiles, while not difficult, can be really tedious even for the simple projects. Some features may seem strange but keep in mind that I write it mostly for myself.

To enable linking with Assembly, use B<--asm>/B<--asm64> options.

Qt4 is kind of supported (B<--qt> option) but you have to rename your headers that use QObject so they will end with I<_qt.hpp>.

To generate a Makefile for a program not using any external libraries with no compilation flags just type:

S<        B<vfnmake>>

If you need to link for example ncurses and want to use the -Wall flag, type this:

S<        B<vfnmake --lib=ncurses --cflag=-Wall>>

For a complete list of arguments, see below.

=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Display the brief version of this help.

=item B<--man>

Display the full version of this help.

=item B<--name> I<name>

Specify the name of the executable file. Default: a.out

=item B<--src> I<dir>

Specify the directory with the source. Default: src/ or ./

=item B<--objs> I<dir>

Specify the directory for the *.o files. Default: objs/

=item B<--bin> I<dir>

Specify the directory for the executable file. Default: ./

=item B<--cc> I<comma_separated_list_of_compilers>

Comma separated list of used C compilers. The first one available is used. Default: clang, gcc

=item B<--cxx> I<comma_separated_list_of_compilers>

Comma separated list of used C++ compilers. The first one available is used. Default: clang++, g++

=item B<--dcc> I<compiler>

A C compiler for 'make debug'. Default: gcc

=item B<--dcxx> I<compiler>

A C++ compiler for 'make debug'. Default: g++

=item B<-c> I<flag>, B<--cflag> I<flag>         (add)

=item B<-C> I<flag>, B<--Cflag> I<flag>         (remove)

Add/remove a compilation flag.

=item B<--cflags> I<comma_separated_list_of_flags>

Overwrite the previous cflags.

=item B<-x> I<flag>, B<--cxxflag> I<flag>       (add)

=item B<-X> I<flag>, B<--Cxxflag> I<flag>       (remove)

Add/remove a C++ compilation flag. These are used only in C++ IN ADDITION to the regular cflags.

=item B<--cxxflags> I<comma_separated_list_of_flags>

Overwrite the previous cxxflags.

=item B<-O> I<n>

Set the optimization level.

=item B<-l> I<library>, B<--lib> I<library>     (add)

=item B<-L> I<library>, B<--Lib> I<library>     (remove)

Add/remove a library to link.

=item B<--libs> I<comma_separated_list_of_libraries>

Overwrite the previous libraries.

=item B<-p> I<package>, B<--pkg> I<package>             (add)

=item B<-P> I<package>, B<--Pkg> I<package>             (remove)

Add/remove a package for pkg-config.

=item B<--pkgs> I<comma_separated_list_of_packages>

Overwrite the previous packages.

=item B<--lflag> I<flag>        (add)

=item B<--Lflag> I<flag>        (remove)

Add/remove a linker flag.

=item B<--lflags> I<comma_separated_list_of_flags>

Overwrite the previous lflags.

=item B<--noe>, B<--no-echo>

=item S<   B<-e>>,    B<--echo>

Print the executed commands or not. Default: --no-echo

=item B<--gcc>

Use only gcc/g++.

=item B<--no-cpp0x>

=item S<   B<--cpp0x>>

Use c++0x standard and switch to gcc/g++.

=item B<--no-asm>

=item S<   B<--asm>>

Enable 32-bit Assembly support (only nasm). Default: --no-asm

=item B<--no-asm64>

=item S<   B<--asm64>>

Enable 64-bit Assembly support (only nasm). Default: --no-asm64

=item B<--no-qt>

=item S<   B<--qt>>

Enable Qt4 meta-object support for files named *_qt.hpp and add some useful flags. Default: --no-qt

=item B<-q>, B<--quiet>

Do not print the used config.

=item B<--stdout>

Print the Makefile to the stdout instead of saving in the file so it can be piped directly to make ("vfnmake --stdout | make -f -").

=item B<-f> I<file>, B<--file> I<file>

Use I<file> instead of vfnmake.conf as the config file. Default: vfnmake.conf

=item B<-d> I<dir>, B<--chdir> I<dir>

Use I<dir> as the working directory.

=item B<-r>, B<--run>

Run make automatically. It can do various other things depending on the times it is specified:

-r - just run make

-rr - run make and then the compiled program

-rrr - run make clean and make

-rrrr - run make clean, make, and the compiled program

=item B<--reset>

Set the default compiler lists and directories.

=item B<-i>, B<--ignore>

Generate the Makefile even if there are no C/C++ files (used mainly with vfnmake.begin/end).

=item B<--configure>

Generates the configure.pl script. To be specific, it just copies itself to the current directory.

=item B<--convert>

Convert the config file from the old format to the new one.

=back

=head1 MAKE TARGETS

=over 12

=item I<all>

default options

=item I<debug (d)>

compile with -g flag, O0 optimization and DEBUG macro

=item I<clean (c)>

delete all compilation results

=item I<fresh (f)>

force full recompilation (equivalent of 'make clean && make')

=item I<run (r)>

compile and run

=back

=head1 THE CONFIG FILES

The config files are read from F</etc/vfnmake.conf>, F<~/.vfnmake.conf> and F<vfnmake.conf> in that order. Additionaly there are two other files - F<vfnmake.begin> and F<vfnmake.end>. For their function see below.

=head2 vfnmake.conf syntax

    cc:                 compiler1 compiler2 ...
    cxx:                compiler1 compiler2 ...
    debug_cc:           compiler
    debug_cxx:          compiler
    libs:               lib1 lib2 ...
    pkgs:               pkg1 pkg2 ...
    O:                  0|1|2|3|s
    cflags:             flag1 flag2 ...
    cxxflags:           flag1 flag2 ...
    lflags:             flag1 flag2 ...
    name:               name
    src_directory:      dir
    bin_directory:      dir
    objs_directory:     dir
    echo:               0|1
    asm:                0|32|64
    qt:                 0|1

To use the default value, leave the field empty.

=head2 vfnmake.begin

Whatever is in this file, will be in the Makefile right after the initialization of the variables. Can be used to override the variables or the default target.

=head2 vfnmake.end

Just like I<vfnmake.begin> but is put at the end of the Makefile. Can be used to add some custom targets without affecting the default one.

=head1 AUTHOR

vfnmake was written by Wojciech 'Vifon' Siewierski <darkvifon at gmail dot com>.

=head1 ACKNOWLEDGEMENTS

Thanks to Tadeusz So≈õnierz for some advices and fixes.

=head1 SEE ALSO

B<make>(1)

=head1 COPYRIGHT

Copyright (C) 2011  Wojciech Siewierski

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
